"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPackageJson = exports.displayError = exports.getTrackingUri = exports.printMessage = exports.setClient = void 0;

var _apolloClient = require("apollo-client");

var _apolloCacheInmemory = require("apollo-cache-inmemory");

var _apolloLinkHttp = require("apollo-link-http");

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _config = require("./config");

var _readPackageJson = _interopRequireDefault(require("read-package-json"));

var _printMessage = _interopRequireDefault(require("print-message"));

var _cliColor = _interopRequireDefault(require("cli-color"));

/* eslint-disable no-console */
var SCHEME = _config.GRAPHCOOL.SCHEME,
    URI = _config.GRAPHCOOL.URI,
    TYPE = _config.GRAPHCOOL.TYPE,
    VERSION = _config.GRAPHCOOL.VERSION,
    KEY = _config.GRAPHCOOL.KEY;

var setClient = function setClient() {
  return new _apolloClient.ApolloClient({
    link: new _apolloLinkHttp.HttpLink({
      uri: "".concat(SCHEME, "://").concat(URI, "/").concat(TYPE, "/").concat(VERSION, "/").concat(KEY),
      fetch: _nodeFetch["default"]
    }),
    cache: new _apolloCacheInmemory.InMemoryCache()
  });
};

exports.setClient = setClient;

var printMessage = function printMessage(message) {
  return (0, _printMessage["default"])(message, {
    marginTop: 1,
    marginBottom: 1,
    paddingTop: 1,
    paddingBottom: 1,
    sideSymbol: ''
  });
};

exports.printMessage = printMessage;

var getTrackingUri = function getTrackingUri(targetPackageName) {
  var SCHEME = _config.WEBAPP.SCHEME,
      URI = _config.WEBAPP.URI;
  return "".concat(SCHEME, "://").concat(URI, "/").concat(targetPackageName);
};

exports.getTrackingUri = getTrackingUri;

var displayError = function displayError(error) {
  return printMessage(['ðŸ¤” ðŸ¤” ðŸ¤”', '', "\uD83D\uDC49 ".concat(_cliColor["default"].bold.red("".concat(error))), '']);
};

exports.displayError = displayError;

var getPackageJson = function getPackageJson(path) {
  return new Promise(function (resolve, reject) {
    return (0, _readPackageJson["default"])(path, null, false, function (err, json) {
      return err ? reject("There was an error reading the file with path:".concat(path)) : resolve(json);
    });
  });
};

exports.getPackageJson = getPackageJson;